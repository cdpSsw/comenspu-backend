const jwt = require("jsonwebtoken");
require("dotenv").config(); 

const SECRET_KEY = process.env.JWT_SECRET;

const authorize = (roles) => {
    return (req, res, next) => {
        const token = req.cookies.token; // ‡∏≠‡πà‡∏≤‡∏ô Token ‡∏à‡∏≤‡∏Å Cookie

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cookies ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!token) {
            console.error("No token found in cookies.");
            return res.status(401).json({ message: "Unauthorized" });
        }

        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ Decode Token
            const decoded = jwt.verify(token, SECRET_KEY);
            console.log("Decoded Token:", decoded);

            // ‡πÄ‡∏ä‡πá‡∏Ñ Role ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô middleware ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!roles.includes(decoded.role)) {
                console.warn("üî¥ Forbidden: Role does not match.");
                return res.status(403).json({ message: "Forbidden" });
            }

            req.user = decoded;  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô request object
            next();  // ‡∏ñ‡πâ‡∏≤ Token ‡πÅ‡∏•‡∏∞ Role ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà route ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        } catch (err) {
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (err.name === "TokenExpiredError") {
                console.error("üî¥ JWT Token Expired:", err.message);
                return res.status(401).json({ message: "Session expired. Please login again." });
            } else {
                console.error("üî¥ JWT Verification Error:", err.message);
                return res.status(401).json({ message: "Invalid or Expired Token" });
            }
        }
    };
};


module.exports = authorize;
